package com.toolkit.auto.mybatis.service;

import java.io.PrintWriter;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.time.DateFormatUtils;

import com.toolkit.auto.mybatis.entity.FrameInfo;
import com.toolkit.auto.mybatis.entity.TableProperties;
import com.toolkit.auto.mybatis.utils.Constants;
import com.toolkit.auto.mybatis.utils.Data;
import com.toolkit.auto.mybatis.utils.MyUtils;
import com.toolkit.auto.mybatis.utils.TimeUtils;

public class InterfaceFile {

    public static void createCoreApiFile(String tableName, String table_comment, List<TableProperties> list, FrameInfo info) throws Exception {
        PrintWriter out = null;
        try {
            String des_table = tableName;
            String className = MyUtils.formatToClassName(tableName);
            String varName = MyUtils.formatToVarName(tableName);
            String classNameExample = className + "Example";
            String varNameExample = varName + "Example";
            String idName = MyUtils.formatToVarName(list.get(0).getName());
            String idType = MyUtils.formatDataType(list.get(0).getDateType());
            out = new PrintWriter(info.getPath_core_api() + className + "CoreService.java", info.getEncode());
            out.println("package " + info.getPackage_api_core() + ";");
            out.println("");
            out.println("import java.util.List;");
            out.println("import java.util.Map;");
            out.println("");
            out.println("import " + info.getPackage_entity() + "." + className + ";");
            out.println("import " + info.getPackage_entity() + "." + classNameExample + ";");
            out.println("");
            out.println("/**");
            out.println(" * " + table_comment);
            out.println(" * @author auto create");
            out.println(" * @since 1.0," + TimeUtils.format(new Date(), Constants.SHOW_DATETIME_FORMAT));
            out.println(" */");
            out.println("public interface " + className + "CoreService");
            out.println("{");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于查询表中对应数据条数");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return 数据条数");
            out.println("     */");
            out.println("    public Integer countByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于添加数据到表中");
            out.println("     * @param " + varNameExample + "添加对象");
            out.println("     * @return true-添加数据成功 false-添加数据失败");
            out.println("     */");
            out.println("    public boolean insertSelective(" + className + " " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于批量添加数据到表中");
            out.println("     * @param " + varNameExample + "添加对象");
            out.println("     * @return true-添加数据成功 false-添加数据失败");
            out.println("     */");
            out.println("    public boolean batchInsert(List<" + className + "> " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键删除数据");
            out.println("     * @param " + idName + "主键ID");
            out.println("     * @return true-删除数据成功 false-删除数据失败");
            out.println("     */");
            out.println("    public boolean deleteByPrimaryKey(String " + idName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据条件删除数据");
            out.println("     * @param " + varNameExample + "删除条件");
            out.println("     * @return true-删除数据成功 false-删除数据失败");
            out.println("     */");
            out.println("    public boolean deleteByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据条件修改数据");
            out.println("     * @param " + varName + "修改对象");
            out.println("     * @param " + varNameExample + "修改条件");
            out.println("     * @return true-修改数据成功 false-修改数据失败");
            out.println("     */");
            out.println("    public boolean updateAllByExample(" + className + " " + varName + "," + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据条件修改数据");
            out.println("     * @param " + varName + "修改对象");
            out.println("     * @param " + varNameExample + "修改条件");
            out.println("     * @return true-修改数据成功 false-修改数据失败");
            out.println("     */");
            out.println("    public boolean updateByExampleSelective(" + className + " " + varName + "," + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键修改数据");
            out.println("     * @param " + varName + "修改对象");
            out.println("     * @return true-修改数据成功 false-修改数据失败");
            out.println("     */");
            out.println("    public boolean updateByPrimaryKeySelective(" + className + " " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键查询单个对象");
            out.println("     * @param " + idName + "主键ID");
            out.println("     * @return " + className + "单个对象结果");
            out.println("     */");
            out.println("    public " + className + " findById(String " + idName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于数据列表，不分页");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return " + className + "列表结果集");
            out.println("     */");
            out.println("    public List<" + className + "> selectByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于分页查询");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return " + className + "分页列表结果集");
            out.println("     */");
            out.println("    public List<" + className + "> pageByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于分页查询");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return  Map分页列表结果集");
            out.println("     */");
            out.println("    public Map<String, Object> selectPageByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("}");
            out.flush();
            out.close();
            out = null;
        } catch (Exception e) {
            throw e;
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    public static void createQueryApiFile(String tableName, String table_comment, List<TableProperties> list, FrameInfo info) throws Exception {
        PrintWriter out = null;
        try {
            String des_table = tableName;
            String className = MyUtils.formatToClassName(tableName);
            String varName = MyUtils.formatToVarName(tableName);
            String classNameExample = className + "Example";
            String varNameExample = varName + "Example";
            String idName = MyUtils.formatToVarName(list.get(0).getName());
            String idType = MyUtils.formatDataType(list.get(0).getDateType());
            out = new PrintWriter(info.getPath_query_api() + className + "QueryService.java", info.getEncode());
            out.println("package " + info.getPackage_api_query() + ";");
            out.println("");
            out.println("import java.util.List;");
            out.println("import java.util.Map;");
            out.println("");
            out.println("import " + info.getPackage_entity() + "." + className + ";");
            out.println("import " + info.getPackage_entity() + "." + classNameExample + ";");
            out.println("");
            out.println("/**");
            out.println(" * " + table_comment);
            out.println(" * @author auto create");
            out.println(" * @since 1.0," + TimeUtils.format(new Date(), Constants.SHOW_DATETIME_FORMAT));
            out.println(" */");
            out.println("public interface " + className + "QueryService");
            out.println("{");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于查询表中对应数据条数");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return 数据条数");
            out.println("     */");
            out.println("    public Integer countByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键查询单个对象");
            out.println("     * @param " + idName + "主键ID");
            out.println("     * @return " + className + "单个对象结果");
            out.println("     */");
            out.println("    public " + className + " findById(String " + idName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于数据列表，不分页");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return " + className + "列表结果集");
            out.println("     */");
            out.println("    public List<" + className + "> selectByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于分页查询");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return " + className + "分页列表结果集");
            out.println("     */");
            out.println("    public List<" + className + "> pageByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于分页查询");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return  Map分页列表结果集");
            out.println("     */");
            out.println("    public Map<String, Object> selectPageByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("}");
            out.flush();
            out.close();
            out = null;
        } catch (Exception e) {
            throw e;
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    /**
     * @方法名: createServiceFile
     * @方法描述: TODO(创建Service API接口文件)
     * @param tableName
     * @param table_comment
     * @param list
     * @param info
     * @throws Exception
     * @返回值 void 返回类型
     * @作者：FuShihua
     * @创建时间 2015年3月9日 下午6:41:11
     * @修改时间 2015年3月9日 下午6:41:11
     * @版本 V1.0
     * @异常
     */
    public static void createServiceFile(String tableName, String table_comment, List<TableProperties> list, FrameInfo info) throws Exception {
        PrintWriter out = null;
        try {
            String des_table = tableName;
            String className = MyUtils.formatToClassName(tableName);
            String varName = MyUtils.formatToVarName(tableName);
            //            String classNameExample = className + "Example";
            String classNameExample = "CriteriaExample";
            //            String varNameExample = varName + "Example";
            String varNameExample = "criteriaExample";
            String classNameKey = className + "Key";
            String varNameKey = varName + "Key";
            String idName = MyUtils.formatToVarName(list.get(0).getName());
            String idType = MyUtils.formatDataType(list.get(0).getDateType());
            out = new PrintWriter(info.getPath_core_api() + className + "Service.java", info.getEncode());
            out.println("package " + info.getPackage_api_core() + ";");
            out.println("");
            out.println("import java.util.List;");
            out.println("import java.util.Map;");
            out.println("");
            out.println("import " + info.getPackage_entity() + "." + className + ";");
            out.println("import " + info.getPackage_entity() + "." + classNameKey + ";");
            //            out.println("import " + info.getPackage_entity() + "." + classNameExample + ";");
            out.println("import com.offen.model." + classNameExample + ";");
            out.println("");
            out.println("/**");
            out.println(" * " + table_comment);
            out.println(" * @author auto create");
            out.println(" * @since 1.0," + TimeUtils.format(new Date(), Constants.SHOW_DATETIME_FORMAT));
            out.println(" */");
            out.println("public interface " + className + "Service {");
            //            out.println("{");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于查询表中对应数据条数");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return 数据条数");
            out.println("     */");
            out.println("    public Integer countByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于添加数据到表中");
            out.println("     * @param " + varNameExample + "添加对象");
            out.println("     * @return true-添加数据成功 false-添加数据失败");
            out.println("     */");
            out.println("    public boolean insertSelective(" + className + " " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于批量添加数据到表中");
            out.println("     * @param " + varNameExample + "添加对象");
            out.println("     * @return true-添加数据成功 false-添加数据失败");
            out.println("     */");
            out.println("    public boolean batchInsert(List<" + className + "> " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键删除数据");
            out.println("     * @param " + idName + "主键ID");
            out.println("     * @return true-删除数据成功 false-删除数据失败");
            out.println("     */");
            out.println("    public boolean deleteByPrimaryKey(String " + idName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键批量删除数据");
            out.println("     * @param " + idName + "s主键ID list");
            out.println("     * @return true-删除数据成功 false-删除数据失败");
            out.println("     */");
            out.println("    public boolean batchDeleteByPrimaryKey(List<" + classNameKey + "> " + varNameKey + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据条件删除数据");
            out.println("     * @param " + varNameExample + "删除条件");
            out.println("     * @return true-删除数据成功 false-删除数据失败");
            out.println("     */");
            out.println("    public boolean deleteByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据条件修改数据");
            out.println("     * @param " + varName + "修改对象");
            out.println("     * @param " + varNameExample + "修改条件");
            out.println("     * @return true-修改数据成功 false-修改数据失败");
            out.println("     */");
            out.println("    public boolean updateAllByExample(" + className + " " + varName + "," + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据条件修改数据");
            out.println("     * @param " + varName + "修改对象");
            out.println("     * @param " + varNameExample + "修改条件");
            out.println("     * @return true-修改数据成功 false-修改数据失败");
            out.println("     */");
            out.println("    public boolean updateByExampleSelective(" + className + " " + varName + "," + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键修改数据");
            out.println("     * @param " + varName + "修改对象");
            out.println("     * @return true-修改数据成功 false-修改数据失败");
            out.println("     */");
            out.println("    public boolean updateByPrimaryKeySelective(" + className + " " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键批量修改数据");
            out.println("     * @param " + varName + "修改对象");
            out.println("     * @return true-修改数据成功 false-修改数据失败");
            out.println("     */");
            out.println("    public boolean batchUpdateByPrimaryKey(List<" + className + "> " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于根据主键查询单个对象");
            out.println("     * @param " + idName + "主键ID");
            out.println("     * @return " + className + "单个对象结果");
            out.println("     */");
            out.println("    public " + className + " findById(String " + idName + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于数据列表，不分页");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return " + className + "列表结果集");
            out.println("     */");
            out.println("    public List<" + className + "> selectByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于分页查询");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return " + className + "分页列表结果集");
            out.println("     */");
            out.println("    public List<" + className + "> pageByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("    /**");
            out.println("     * This method was generated by " + Data.getSystemUser());
            out.println("     * 此方法对应数据库表" + des_table + "用于分页查询");
            out.println("     * @param " + varNameExample + "查询条件");
            out.println("     * @return  Map分页列表结果集");
            out.println("     */");
            out.println("    public Map<String, Object> selectPageByExample(" + classNameExample + " " + varNameExample + ");");
            out.println("");
            out.println("}");
            out.flush();
            out.close();
            out = null;
        } catch (Exception e) {
            throw e;
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    /**
     * @方法名: createServiceFile
     * @方法描述: TODO(创建Service API接口文件)
     * @param tableName
     * @param table_comment
     * @param list
     * @param info
     * @throws Exception
     * @返回值 void 返回类型
     * @作者：FuShihua
     * @创建时间 2015年3月9日 下午6:41:11
     * @修改时间 2015年3月9日 下午6:41:11
     * @版本 V1.0
     * @异常
     */
    public static void createServiceExtendFile(String tableName, String table_comment, List<TableProperties> list, FrameInfo info) throws Exception {
        PrintWriter out = null;
        try {
            String className = MyUtils.formatToClassName(tableName);
            out = new PrintWriter(info.getPath_core_api() + className + "Service.java", info.getEncode());
            out.println("package " + info.getPackage_api_core() + ";");
            out.println("");
            out.println("");
            out.println("import " + info.getPackage_entity() + "." + className + ";");
            out.println("import java.util.List;");
            out.println("");
            out.println("/**");
            out.println(" * " + table_comment);
            out.println(" * @author auto create");
            out.println(" * @param <" + className + ">");
            out.println(" * @since 1.0," + TimeUtils.format(new Date(), Constants.SHOW_DATETIME_FORMAT));
            out.println(" */");
            out.println("public interface " + className + "Service {");

            String varName = MyUtils.formatToVarName(tableName);

            out.println("    /**");
            out.println("    *@方法名: insertSelective");
            out.println("    *@方法描述: 根据对象插入单条记录");
            out.println("    *@param " + varName);
            out.println("    *@返回值 Integer 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public Integer insertSelective(" + className + " " + varName + ") throws Exception;");
            out.println("");
            out.println("    /**");
            out.println("    *@方法名: insertBatch");
            out.println("    *@方法描述: 根据对象批量插入记录");
            out.println("    *@param " + varName);
            out.println("    *@返回值 Integer 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public Integer insertBatch(List<" + className + "> " + varName + ") throws Exception;");
            out.println("");
            
            out.println("    /**");
            out.println("    *@方法名: deleteByPrimaryKey");
            out.println("    *@方法描述: 根据主键删除单条记录");
            out.println("    *@param " + varName);
            out.println("    *@返回值 Integer 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public Integer deleteByPrimaryKey(Object id);");
            out.println("");
            
            out.println("    /**");
            out.println("    *@方法名: deleteBatchByPrimaryKey");
            out.println("    *@方法描述: 根据主键批量删除");
            out.println("    *@param " + varName);
            out.println("    *@返回值 Integer 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public Integer deleteBatchByPrimaryKey(List<Object> ids);");
            out.println("");
            out.println("    /**");
            out.println("    *@方法名: updateByPrimaryKeySelective");
            out.println("    *@方法描述: 根据主键选择更新单个对象");
            out.println("    *@param " + varName);
            out.println("    *@返回值 Integer 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public Integer updateByPrimaryKeySelective(" + className + " " + varName + ");");
            out.println("");
            out.println("    /**");
            out.println("    *@方法名: findById");
            out.println("    *@方法描述: 根据id 查询对象");
            out.println("    *@param " + varName);
            out.println("    *@返回值 对象 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public " + className + " findById(Object id);");
            out.println("");
            
            
            out.println("    /**");
            out.println("    *@方法名: selectByCondition");
            out.println("    *@方法描述: 分条件查询对象");
            out.println("    *@param " + varName);
            out.println("    *@返回值 List<" + className + "> 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public List<" + className + "> selectByCondition(" + className + " " + varName + ");");
            out.println("");
            
            
            out.println("    /**");
            out.println("    *@方法名: selectCountByCondition");
            out.println("    *@方法描述: 分条件查询对象总数");
            out.println("    *@param " + varName);
            out.println("    *@返回值 Integer 返回类型");
            out.println("    *@作者：hycx");
            out.println("    *@创建时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@修改时间 " + DateFormatUtils.format(new Date(), "yyyy年MM月dd日 HH:mm:ss"));
            out.println("    *@版本 V1.0");
            out.println("    *@异常");
            out.println("    **/");
            out.println("    public Integer selectCountByCondition(" + className + " " + varName + ");");
            out.println("");
            
            out.println("");
            out.println("}");
            out.flush();
            out.close();
            out = null;
        } catch (Exception e) {
            throw e;
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

}
