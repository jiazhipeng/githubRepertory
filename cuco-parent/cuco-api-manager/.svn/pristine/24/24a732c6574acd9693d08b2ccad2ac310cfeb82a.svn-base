package cn.cuco.controller.manager.member;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import cn.cuco.annotation.API;
import cn.cuco.entity.Member;
import cn.cuco.entity.MemberAccount;
import cn.cuco.enums.MemberStatus;
import cn.cuco.service.member.account.MemberAccountService;
import cn.cuco.service.member.info.MemberService;


@RestController
@RequestMapping(value = "/member")
public class MemberController {
	
	@Autowired
	private MemberService memberService;
	
	@Autowired
	private MemberAccountService memberAccountService;
	
	@API(value = "用户列表")
	@RequestMapping(value = "getMemberListByPage", method = RequestMethod.POST)
	public Object getMemberListByPage(Member member){
		
		return memberService.getMemberListByPage(member);
	} 
	
	@API(value = "用户详情")
	@RequestMapping(value = "getMemberById", method = RequestMethod.GET)
	public Object getMemberById(Long id){
		
		return memberService.getMemberById(id);
	}
	
	@API(value = "账户信息")
	@RequestMapping(value = "getAccountByMemberId", method = RequestMethod.GET)
	public Object getAccountByMemberId(MemberAccount memberAccount){
		
		return memberAccountService.getMemberAccountByMemberId(memberAccount.getMemberId());
	}
	
	@API(value = "风控审核的用户资料")
	@RequestMapping(value = "getRiskByMemberId", method = RequestMethod.GET)
	public Object getRiskByMemberId(){
		
		return "";
	}
	
	@API(value = "变更余额")
	@RequestMapping(value = "updateAccount", method = RequestMethod.POST)
	public Object updateAccount(){
		//memberAccountService.updateMemberAccount(memberAccount);
		return "";
	}
	
	@API(value = "冻结解冻用户")
	@RequestMapping(value = "updateStatus", method = RequestMethod.POST)
	public Object updateStatus(Member member){
		if(member == null){
			return "参数对象不能为null";
		}
		if(member.getId() == null){
			return "id不能为null";
		}
		Member memberStatus = memberService.getMemberById(member.getId());
		Integer status = memberStatus.getStatuts();
		if(status == MemberStatus.NORMAL.getIndex()){
			memberService.updateMemberByFreeze(member);
		}else{
			memberService.updateMemberByUnfreeze(member);
		}
		
		return "";
	}
	
	@API(value = "余额明细")
	@RequestMapping(value = "getAccountLogByMemberId", method = RequestMethod.GET)
	public Object getAccountLogByMemberId(){
		
		return "";
	}
	
	
}
