package cn.cuco.push.umeng;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.Map;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Maps;

import cn.cuco.common.utils.JsonUtils;

public class PushClient {
	protected Logger logger = Logger.getLogger(this.getClass());  

	// The user agent
	protected final String USER_AGENT = "Mozilla/5.0";

	// This object is used for sending the post request to Umeng
	protected HttpClient client = new DefaultHttpClient();
	
	// The host
	protected static final String host = "http://msg.umeng.com";
	
	// The upload path
	protected static final String uploadPath = "/upload";
	
	// The post path
	protected static final String postPath = "/api/send";
	
	//The post status 
	protected static final String status  = "/api/status";
	
	// The post cancel
	protected static final String  cancel = "/api/cancel";
	
	
	/**
	 * @throws Exception 
	 * 查询任务状态
	* @Title: getStatus 
	* @Description: TODO
	* @author q.p.x
	* @param @param param
	* @param @return    
	* @return Map<String,Object>    
	* @date 2016年2月23日 下午2:02:17 
	* @throws
	 */
	public Map<String,Object> getStatus(Map<String,Object> param,String appMasterSecret) throws Exception{
		
        String url = host + status;
        
        logger.info("--------友盟查询任务状态的url为----------:"+url);
		return sendMessage(param, appMasterSecret, url);
		
	}
	
	/**
	 * 
	* @Title: cancelMessage 取消消息
	* @Description: TODO
	* @author q.p.x
	* @param @param param
	* @param @param appMasterSecret
	* @param @return
	* @param @throws Exception    
	* @return Map<String,Object>    
	* @date 2016年2月23日 下午9:56:02 
	* @throws
	 */
	public Map<String,Object> cancelMessage(Map<String,Object> param,String appMasterSecret) throws Exception{
		String url = host + cancel;
        logger.info("--------友盟取消任务状态的url为----------:"+url);
		return sendMessage(param, appMasterSecret, url);
	}

	/**
	 * 
	* @Title: sendMessage 取消和查询消息状态的 公用方法
	* @Description: TODO
	* @author q.p.x
	* @param @param param
	* @param @param appMasterSecret
	* @param @param url
	* @param @return
	* @param @throws UnsupportedEncodingException
	* @param @throws IOException
	* @param @throws ClientProtocolException    
	* @return Map<String,Object>    
	* @date 2016年2月23日 下午9:57:48 
	* @throws
	 */
	private Map<String, Object> sendMessage(Map<String, Object> param,String appMasterSecret, String url) throws UnsupportedEncodingException, IOException,ClientProtocolException {
		String timestamp = Integer.toString((int)(System.currentTimeMillis() / 1000));
		param.put("timestamp", timestamp);
        

        String postBody = JsonUtils.extractJson(param);
        logger.info("发送的报文为：" + JsonUtils.extractJson(param));
        String sign = DigestUtils.md5Hex(("POST" + url + postBody + appMasterSecret).getBytes("utf8"));
        url = url + "?sign=" + sign;
        logger.info("---------------url:"+url);
        
        HttpPost post = new HttpPost(url);
        post.setHeader("User-Agent", USER_AGENT);
        StringEntity se = new StringEntity(postBody, "UTF-8");
        post.setEntity(se);
        // Send the post request and get the response
        HttpResponse response = client.execute(post);
        int status = response.getStatusLine().getStatusCode();
        //System.out.println("Response Code : " + status);
        logger.info("Response Code (status): " + status);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        StringBuffer result = new StringBuffer();
        String line = "";
        while ((line = rd.readLine()) != null) {
            result.append(line);
        }
        Map<String,Object> maps = Maps.newHashMap();
        maps.put("status", status);
        maps.put("result", result.toString());
        logger.info("--------------------maps result----------------------------:"+JsonUtils.extractJson(maps));
        return maps;
	}

	public Map<String,Object> send(UmengNotification msg) throws Exception {
		String timestamp = Integer.toString((int)(System.currentTimeMillis() / 1000));
		msg.setPredefinedKeyValue("timestamp", timestamp);
        String url = host + postPath;
        
        logger.info("友盟推送服务端的url为:"+url);
        String postBody = msg.getPostBody();
        
        
        logger.info("发送的报文为：" + postBody);
        String sign = DigestUtils.md5Hex(("POST" + url + postBody + msg.getAppMasterSecret()).getBytes("utf8"));
        url = url + "?sign=" + sign;
        HttpPost post = new HttpPost(url);
        post.setHeader("User-Agent", USER_AGENT);
        StringEntity se = new StringEntity(postBody, "UTF-8");
        post.setEntity(se);
        // Send the post request and get the response
        HttpResponse response = client.execute(post);
        int status = response.getStatusLine().getStatusCode();
        //System.out.println("Response Code : " + status);
        logger.info("Response Code (status): " + status);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        StringBuffer result = new StringBuffer();
        String line = "";
        while ((line = rd.readLine()) != null) {
            result.append(line);
        }
        Map<String,Object> maps = Maps.newHashMap();
        maps.put("status", status);
        maps.put("result", result.toString());
        maps.put("postBody", postBody);
        logger.info("result::"+result.toString());
        logger.info("maps result::"+JsonUtils.extractJson(maps));
        return maps;

    }

	// Upload file with device_tokens to Umeng
	public String uploadContents(String appkey,String appMasterSecret,String contents) throws Exception {
		// Construct the json string
		JSONObject uploadJson = new JSONObject();
		uploadJson.put("appkey", appkey);
		String timestamp = Integer.toString((int)(System.currentTimeMillis() / 1000));
		uploadJson.put("timestamp", timestamp);
		uploadJson.put("content", contents);
		// Construct the request
		String url = host + uploadPath;
		String postBody = uploadJson.toString();
		String sign = DigestUtils.md5Hex(("POST" + url + postBody + appMasterSecret).getBytes("utf8"));
		url = url + "?sign=" + sign;
		HttpPost post = new HttpPost(url);
		post.setHeader("User-Agent", USER_AGENT);
		StringEntity se = new StringEntity(postBody, "UTF-8");
		post.setEntity(se);
		// Send the post request and get the response
		HttpResponse response = client.execute(post);
		System.out.println("Response Code : " + response.getStatusLine().getStatusCode());
		BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
		StringBuffer result = new StringBuffer();
		String line = "";
		while ((line = rd.readLine()) != null) {
			result.append(line);
		}
		System.out.println(result.toString());
		// Decode response string and get file_id from it
		JSONObject respJson = JsonUtils.parseObject(result.toString(), JSONObject.class);
		String ret = respJson.getString("ret");
		if (!ret.equals("SUCCESS")) {
			throw new Exception("Failed to upload file");
		}
		JSONObject data = respJson.getJSONObject("data");
		String fileId = data.getString("file_id");
		// Set file_id into rootJson using setPredefinedKeyValue
		
		return fileId;
	}

}
