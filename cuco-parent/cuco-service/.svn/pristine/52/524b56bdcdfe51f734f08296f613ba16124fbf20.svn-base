package cn.cuco.service.basic.carport.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;

import cn.cuco.common.utils.param.ParamVerifyUtils;
import cn.cuco.dao.CarBrandMapper;
import cn.cuco.dao.CarMapper;
import cn.cuco.dao.CarTypeMapper;
import cn.cuco.dao.CarTypePriceMapper;
import cn.cuco.entity.Car;
import cn.cuco.entity.CarBrand;
import cn.cuco.entity.CarType;
import cn.cuco.entity.CarTypePrice;
import cn.cuco.entity.City;
import cn.cuco.entity.Supplier;
import cn.cuco.enums.Valid;
import cn.cuco.exception.RuntimeExceptionWarn;
import cn.cuco.page.PageResult;
import cn.cuco.service.basic.carport.CarTypeService;
import cn.cuco.service.basic.dictionary.CityService;
import cn.cuco.service.log.OperateLogService;

@Service(value = "carTypeService")
public class CarTypeServiceImpl implements CarTypeService {

    @Autowired
    private CarTypeMapper<CarType> carTypeMapper;
    @Autowired
    private CarMapper<Car> carMapper;
    @Autowired
    private CarTypePriceMapper<CarTypePrice> carTypePriceMapper;
    @Autowired
    private CarBrandMapper<CarBrand> carBrandMapper;
    @Autowired
    private CityService cityService;
    @Autowired
    private OperateLogService operateLogService;
    
    /**
     * 创建车型
     */
	@Override
	public CarType createCarType(CarType carType) {
		ParamVerifyUtils.paramNotNull(carType);
		ParamVerifyUtils.paramNotNull(carType.getBrand(), "创建车型，车型品牌不能为空");
		ParamVerifyUtils.paramNotNull(carType.getCarType(), "创建车型，车型型号不能为空");
		ParamVerifyUtils.paramNotNull(carType.getTankVolume(), "创建车型，油箱体积不能为空");
		ParamVerifyUtils.paramNotNull(carType.getImageUrl(), "创建车型，车型图片不能为空");
		ParamVerifyUtils.paramNotNull(carType.getInsuranceUnlock(), "创建车型，解锁保险费不能为空");
		ParamVerifyUtils.paramNotNull(carType.getInsuranceNotUnlock(), "创建车型，非解锁保险费不能为空");
		ParamVerifyUtils.paramNotNull(carType.getIsRestriction(), "创建车型，是否参与限号不能为空");
		ParamVerifyUtils.paramNotNull(carType.getBasicCost(), "创建车型，基础费用不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifierId(), "创建车型，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifier(), "创建车型，操作人不能为空");
		//验证车型
		CarType carTypeSearch = new CarType();
		carTypeSearch.setBrand(carType.getBrand());
		carTypeSearch.setCarType(carType.getCarType());
		if(!this.carTypeMapper.selectByCondition(carTypeSearch).isEmpty()){
			  throw new RuntimeExceptionWarn("车型重复，请重新选择");
		}
		//创建默认值
		carType.setValid(Valid.DOWN.getValue());
		carType.setLasttimeModify(new Date());
		carType.setCreated(new Date());
		//创建车型
		this.carTypeMapper.insertSelective(carType);
		//创建城市运营定价
		this.createCarTypePrice(carType);
		//创建车型日志
		operateLogService.createOperateLogForCartype(carType);
		return carType;
	}

	/**
	 * 修改车型
	 */
	@Override
	public CarType updateCarType(CarType carType) {
		ParamVerifyUtils.paramNotNull(carType);
		ParamVerifyUtils.paramNotNull(carType.getId(), "修改车型ID不能为空");
		ParamVerifyUtils.paramNotNull(carType.getBrand(), "创建车型，车型品牌不能为空");
		ParamVerifyUtils.paramNotNull(carType.getCarType(), "创建车型，车型型号不能为空");
		ParamVerifyUtils.paramNotNull(carType.getTankVolume(), "创建车型，油箱体积不能为空");
		ParamVerifyUtils.paramNotNull(carType.getImageUrl(), "创建车型，车型图片不能为空");
		ParamVerifyUtils.paramNotNull(carType.getInsuranceUnlock(), "创建车型，解锁保险费不能为空");
		ParamVerifyUtils.paramNotNull(carType.getInsuranceNotUnlock(), "创建车型，非解锁保险费不能为空");
		ParamVerifyUtils.paramNotNull(carType.getIsRestriction(), "创建车型，是否参与限号不能为空");
		ParamVerifyUtils.paramNotNull(carType.getBasicCost(), "创建车型，基础费用不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifierId(), "创建车型，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifier(), "创建车型，操作人不能为空");
		//验证数据是否存在
		if(this.getCarTypeById(carType.getId())==null){
			throw new RuntimeExceptionWarn("车型不存在");
		}
		//验证车型
		CarType carTypeSearch = new CarType();
		carTypeSearch.setBrand(carType.getBrand());
		carTypeSearch.setCarType(carType.getCarType());
		List<CarType> lists = this.carTypeMapper.selectByCondition(carTypeSearch);
		for (CarType carTypeView : lists) {
			if(carTypeView.getId() != carType.getId()){
				throw new RuntimeExceptionWarn("车型重复，请重新选择");
			}
		}
		carType.setLasttimeModify(new Date());
		//修改车型
		this.carTypeMapper.updateByPrimaryKeySelective(carType);
		//修改城市运营定价
		this.updateCarTypePrice(carType);
		
		return this.getCarTypeById(carType.getId());
	}

	/**
	 * 根据id取车型信息
	 */
	@Override
	public CarType getCarTypeById(Long id) {
		ParamVerifyUtils.paramNotNull(id, "取车型详情ID不能为空");
		CarType carType = this.carTypeMapper.selectByPrimaryKey(id);
		if(carType!=null){
			CarTypePrice carTypePrice = new CarTypePrice();
			carTypePrice.setCarTypeId(id);
			carType.setCarTypePrices(this.carTypePriceMapper.selectByCondition(carTypePrice));
		}
		return carType;
	}

	/**
	 * 分页取车型数据
	 */
	@Override
	public PageResult<CarType> getCarTypeByPage(CarType carType) {
		
		Integer page = carType.getPage();
	    Integer pageSize = carType.getPageSize();
	     /*搜索条件*/
	    CarType carTypeSearch = new CarType();
        if(StringUtils.isNotBlank(carType.getBrand())){
        	carTypeSearch.setBrand(carType.getBrand());
        }
        if(StringUtils.isNotBlank(carType.getCarType())){
        	carTypeSearch.setCarType(carType.getCarType());
        }
	    List<CarType> carTypes = null;
	    /*总记录数*/
	    Integer totalSize = this.carTypeMapper.selectCountByConditionByPage(carTypeSearch);
	    /*分页信息*/
	    PageHelper.startPage(page,pageSize);
	    carTypes = this.carTypeMapper.selectByConditionByPage(carTypeSearch);
	    if(CollectionUtils.isNotEmpty(carTypes)){
	    	for (CarType carTypeView : carTypes) {
	    		Car car = new Car();
	    		car.setCarTypeId(carTypeView.getId());
	    		carTypeView.setCarCount(carMapper.selectCountByCondition(car));
	    	}
	    }
        PageResult<CarType> pageResult = new PageResult<CarType>(page,pageSize,totalSize,carTypes);
		return pageResult;
	}

	/**
	 * 上架
	 */
	@Override
	public void updateCarTypeShelves(CarType carType) {
		ParamVerifyUtils.paramNotNull(carType);
		ParamVerifyUtils.paramNotNull(carType.getId(), "车型上架，ID不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifierId(), "车型上架，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifier(), "车型上架，操作人不能为空");
		//验证数据是否存在
		CarType carTypeView = this.getCarTypeById(carType.getId());
		if(carTypeView==null){
			throw new RuntimeExceptionWarn("车型不存在");
		}
		if(carTypeView.getValid() == Valid.UP.getValue().intValue()){
			throw new RuntimeExceptionWarn("为上架状态不可重新变更");
		}
		carType.setValid(Valid.UP.getValue());
		carType.setLasttimeModify(new Date());
		//修改车型状态
		this.carTypeMapper.updateByPrimaryKeySelective(carType);
		//创建车型日志
		operateLogService.createOperateLogForCartype(carType);
	}

	/**
	 * 下架
	 */
	@Override
	public void updateCarTypeTheShelves(CarType carType) {
		ParamVerifyUtils.paramNotNull(carType);
		ParamVerifyUtils.paramNotNull(carType.getId(), "车型下架，ID不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifierId(), "车型下架，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(carType.getModifier(), "车型下架，操作人不能为空");
		//验证数据是否存在
		CarType carTypeView = this.getCarTypeById(carType.getId());
		if(carTypeView==null){
			throw new RuntimeExceptionWarn("车型不存在");
		}
		if(carTypeView.getValid() == Valid.DOWN.getValue().intValue()){
			throw new RuntimeExceptionWarn("为下架状态不可重新变更");
		}
		carType.setValid(Valid.DOWN.getValue());
		carType.setLasttimeModify(new Date());
		//修改车型状态
		this.carTypeMapper.updateByPrimaryKeySelective(carType);
		//创建车型日志
		operateLogService.createOperateLogForCartype(carType);
	}

	/**
	 * 根据车型和城市Id查询运营公里计费规则
	 */
	@Override
	public List<CarTypePrice> getCarTypePriceList(CarTypePrice carTypePrice) {
		return this.carTypePriceMapper.selectByCondition(carTypePrice);
	}
	
	/**
	 * 查询所有服务城市
	 */
	@Override
	public List<CarTypePrice> getAllCarTypeCityAll() {
		return this.carTypePriceMapper.getAllCarTypeCityAll();
	}

	/**
	 * 去重查询所有品牌
	 */
	@Override
	public List<String> getCarBrandForAll() {
		return this.carBrandMapper.selectCarBrandForAll();
	}

	/**
	 * 根据车品牌查询所有车型
	 */
	@Override
	public List<CarBrand> getCartypeByBrand(CarBrand carBrand) {
		ParamVerifyUtils.paramNotNull(carBrand);
		ParamVerifyUtils.paramNotNull(carBrand.getBrand(), "根据品牌查询车型，品牌不能为空");
		return this.carBrandMapper.selectCartypeByBrand(carBrand);
	}

	/**
	* @Title: createCarTypePrice 
	* @Description: 创建车型公里定价
	* @param @param carTypePrice
	* @return CarTypePrice
	 */
	private void createCarTypePrice(CarType carType) {
		if(carType.getCarTypePrices().isEmpty()){
			throw new RuntimeExceptionWarn("创建车型，城市运营定价数据不能为空");
		}
		List<CarTypePrice> lists = carType.getCarTypePrices();
		for (CarTypePrice carTypePriceView : lists) {
			ParamVerifyUtils.paramNotNull(carTypePriceView.getCityId(), "创建车型，城市ID不能为空");
			ParamVerifyUtils.paramNotNull(carTypePriceView.getKmOne(), "创建车型，>50KM ≤100KM定价不能为空");
			ParamVerifyUtils.paramNotNull(carTypePriceView.getKmTwo(), "创建车型，>100KM ≤200KM定价不能为空");
			ParamVerifyUtils.paramNotNull(carTypePriceView.getKmThree(), "创建车型，>200KM ≤300KM定价不能为空");
			ParamVerifyUtils.paramNotNull(carTypePriceView.getKmFour(), "创建车型，>300KM ≤500KM定价不能为空");
			ParamVerifyUtils.paramNotNull(carTypePriceView.getKmFive(), "创建车型，>500KM定价不能为空");
			City city = cityService.getCityById(carTypePriceView.getCityId()); 
			if(city==null){
				throw new RuntimeExceptionWarn("创建车型，城市不存在");
			}
			carTypePriceView.setCarTypeId(carType.getId());
			carTypePriceView.setCityId(city.getId());
			carTypePriceView.setCityName(city.getName());
			carTypePriceView.setCityCode(city.getCode());
			carTypePriceView.setCreated(new Date());
		}
		this.carTypePriceMapper.insertBatch(lists);
	}
	
	/**
	* @Title: updateCarTypePrice 
	* @Description: 修改城市运营定价
	* @author huanghua
	* @param carType
	* @return void
	 */
	private void updateCarTypePrice(CarType carType) {
		if(carType.getCarTypePrices().isEmpty()){
			throw new RuntimeExceptionWarn("修改车型，城市运营定价数据不能为空");
		}
		//删除旧的运营定价
		this.deleteCarTypePrice(carType);
		//添加新的运营定价
		this.createCarTypePrice(carType);
	}
	
	/**
	* @Title: deleteCarTypePrice 
	* @Description: 删除城市运营定价
	* @author huanghua
	* @param carType
	* @return void
	 */
	private void deleteCarTypePrice(CarType carType) {
		CarTypePrice carTypePrice = new CarTypePrice();
		carTypePrice.setCarTypeId(carType.getId());
		this.carTypePriceMapper.deleteCarTypePriceByCarTypeId(carTypePrice);
	}
	
}
