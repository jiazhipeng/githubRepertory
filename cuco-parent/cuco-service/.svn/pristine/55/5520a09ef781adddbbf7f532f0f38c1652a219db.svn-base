package cn.cuco.service.member.carUsed.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;

import cn.cuco.common.utils.param.ParamVerifyUtils;
import cn.cuco.dao.MemberCarUsedAddressMapper;
import cn.cuco.dao.MemberCarUsedMapper;
import cn.cuco.entity.CarType;
import cn.cuco.entity.Member;
import cn.cuco.entity.MemberCarUsed;
import cn.cuco.entity.MemberCarUsedAddress;
import cn.cuco.entity.MemberCarport;
import cn.cuco.enums.MemberCarportStatus;
import cn.cuco.enums.MemberStatus;
import cn.cuco.enums.RiskAuditStatus;
import cn.cuco.exception.ExceptionUtil;
import cn.cuco.page.PageResult;
import cn.cuco.service.basic.carport.CarTypeService;
import cn.cuco.service.car.stock.StockService;
import cn.cuco.service.member.carUsed.MemberCarUsedService;
import cn.cuco.service.member.carUsed.MemberCarportService;
import cn.cuco.service.member.info.MemberService;
import cn.cuco.service.order.OrderCarUsedService;

/**
 * @ClassName: MemberCarUsedServiceImpl
 * @Description: 用户用车相关接口实现
 * @author zc.du
 * @date 2017年2月23日 上午10:42:37
 */
@Service(value = "memberCarUsedService")
public class MemberCarUsedServiceImpl implements MemberCarUsedService {

	@Autowired
	private MemberCarUsedMapper<MemberCarUsed> memberCarUsedMapper;
	@Autowired
	private MemberCarUsedAddressMapper<MemberCarUsedAddress> memberCarUsedAddressMapper;
	@Autowired
	private MemberService memberService;
	@Autowired
	private MemberCarportService memberCarportService;
	@Autowired
	private StockService stockService;
	@Autowired
	private OrderCarUsedService orderCarUsedService;
	@Autowired
	private CarTypeService carTypeService;

	@Override
	public MemberCarUsed createMemberCarUsedForApp(MemberCarUsed memberCarUsed) {
		ParamVerifyUtils.paramNotNull(memberCarUsed);
		Long memberId = memberCarUsed.getMemberId();
		Long carportId = memberCarUsed.getCarportId();
		Date start = memberCarUsed.getOrderCarUsedTime();
		Date end = memberCarUsed.getOrderCarReturnTime();
		Long carTypeId = memberCarUsed.getOrderCartypeId();
		ParamVerifyUtils.paramNotNull(memberId,"用户发起用车时，用户ID不能为空");
		ParamVerifyUtils.paramNotNull(carportId,"用户发起用车时，车库ID不能为空");
		ParamVerifyUtils.paramNotNull(carTypeId,"用户发起用车时，预约车型ID不能为空");
		ParamVerifyUtils.paramNotNull(start,"用户发起用车时，预计用车开始时间不能为空");
		ParamVerifyUtils.paramNotNull(end,"用户发起用车时，预计用车结束时间不能为空");
		
		if(start.after(end)){
			ExceptionUtil.throwWarn("预计用车时间不能早于预计还车时间");
		}
		
		Member member = this.memberService.getMemberById(memberId);
		ParamVerifyUtils.paramNotNull(member,"用户不存在，无法发起用车");
		if(!RiskAuditStatus.MANUAL_PASS.getIndex().equals(member.getRiskAuditStatus())){
			ExceptionUtil.throwWarn("用户审核未通过，无法发起用车");
		}
		if(MemberStatus.FROZEN.getIndex().equals(member.getStatuts())){
			ExceptionUtil.throwWarn("用户被冻结，无法发起用车");
		}
		//判断库存
		boolean hasStock = false;
		MemberCarport memberCarport = new MemberCarport();
		memberCarport.setMemberId(memberId);
		memberCarport.setCarportId(carportId);
		memberCarport.setStatus(MemberCarportStatus.UNLOCKED.getIndex());
		memberCarport = this.memberCarportService.getMemberCarport(memberCarport);
		if(null == memberCarport){
			//非会员用车
			hasStock = stockService.isExitStockByUnMember(carTypeId, start, end);
			memberCarUsed.setType(0);
		}else{
			//判断账户余额，如果余额不足则为非会员用车，反之则为会员用车
			hasStock = stockService.isExitStockByMember(carTypeId, start, end);
			memberCarUsed.setType(1);
		}
		if(!hasStock){
			ExceptionUtil.throwWarn("所选时间段内，所选车型无库存，发起用车失败");
		}
		//创建用车记录
		//创建任务
		//用车地址维护
		memberCarUsed.setMemberName(member.getName());
		this.updateUseCarAddredd(memberCarUsed);
		return null;
	}

	@Override
	public MemberCarUsed updateMemberCarUsedForChangeCar(MemberCarUsed memberCarUsed) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public MemberCarUsed updateMemberCarUsedForLimitChangeCar(MemberCarUsed memberCarUsed) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public MemberCarUsed getMemberCarUsed(MemberCarUsed memberCarUsed) {
		List<MemberCarUsed> list = this.memberCarUsedMapper.getMemberCarUsedListWithSort(memberCarUsed);
		if(CollectionUtils.isNotEmpty(list)){
			list.get(0);
		}
		return null;
	}

	@Override
	public PageResult<MemberCarUsed> getMemberCarUsedListByPage(MemberCarUsed memberCarUsed) {
		ParamVerifyUtils.paramNotNull(memberCarUsed);
		Integer page = memberCarUsed.getPage();
		Integer pageSize = memberCarUsed.getPageSize();
		Integer totalSize = this.memberCarUsedMapper.selectCountByCondition(memberCarUsed);
		PageHelper.startPage(page, pageSize);
		List<MemberCarUsed> list = this.memberCarUsedMapper.getMemberCarUsedListWithSort(memberCarUsed);
		PageResult<MemberCarUsed> pageResult = new PageResult<MemberCarUsed>(page, pageSize, totalSize, list);
		return pageResult;
	}

	@Override
	public Integer getMemberCarUsedCountByMemberId(Long memberId) {
		ParamVerifyUtils.paramNotNull(memberId, "根据用户ID获取用车次数时，用户ID不能为空");
		return this.memberCarUsedMapper.getMemberCarUsedCountByMemberId(memberId);
	}

	@Override
	public BigDecimal getMemberCarUsedMileagesByMemberId(Long memberId) {
		ParamVerifyUtils.paramNotNull(memberId, "根据用户ID获取用户行驶公里数时，用户ID不能为空");
		return this.memberCarUsedMapper.getMemberCarUsedMileagesByMemberId(memberId);
	}

	@Override
	public Map<String, Integer> getMemberDriveMileageStatistics(Long memberId) {
		ParamVerifyUtils.paramNotNull(memberId, "根据用户ID获取用户用车里程统计，用户ID不能为空");
		return this.orderCarUsedService.getMemberDriveMileageStatistics(memberId);
	}

	@Override
	public Map<String, Integer> getMemberCarTypeUsedStatistics(Long memberId) {
		ParamVerifyUtils.paramNotNull(memberId, "根据用户ID获取用户使用车型统计，用户ID不能为空");
		Map<String, Integer> result = new HashMap<String,Integer>();
		Map<Long,Integer> map = this.memberCarUsedMapper.getMemberCarTypeUsedStatisticsByMemberId(memberId);
		if(!MapUtils.isEmpty(map)){
			for (Map.Entry<Long, Integer> entry : map.entrySet()) {
				CarType car = this.carTypeService.getCarTypeById(entry.getKey());
				result.put(car.getBrand()+" "+car.getCarType(), entry.getValue());
			}
		}
		return result;
	}

	@Override
	public MemberCarUsed updateMemberCarUsedStatusByCancelForApp(MemberCarUsed memberCarUsed) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Integer deleteMemberCarUsedAddress(MemberCarUsedAddress memberCarUsedAddress) {
		ParamVerifyUtils.paramNotNull(memberCarUsedAddress);
		ParamVerifyUtils.paramNotNull(memberCarUsedAddress.getId(),"删除用户用车地址时，用车地址ID不能为空");
		MemberCarUsedAddress target = new MemberCarUsedAddress();
		target.setId(memberCarUsedAddress.getId());
		target.setValid(0);
		return this.memberCarUsedAddressMapper.updateByPrimaryKeySelective(target);
	}

	@Override
	public PageResult<MemberCarUsedAddress> getMemberCarUsedAddressListByPage(MemberCarUsedAddress memberCarUsedAddress) {
		ParamVerifyUtils.paramNotNull(memberCarUsedAddress);
		ParamVerifyUtils.paramNotNull(memberCarUsedAddress.getMemberId(),"获取用户用车地址时，用户ID不能为空");
		memberCarUsedAddress.setValid(1);
		Integer page = memberCarUsedAddress.getPage();
		Integer pageSize = memberCarUsedAddress.getPageSize();
		Integer totalSize = this.memberCarUsedAddressMapper.selectCountByCondition(memberCarUsedAddress);
		PageHelper.startPage(page, pageSize);
		List<MemberCarUsedAddress> list = this.memberCarUsedAddressMapper.getMemberCarUsedAddressListWithSort(memberCarUsedAddress);
		PageResult<MemberCarUsedAddress> pageResult = new PageResult<MemberCarUsedAddress>(page, pageSize, totalSize, list);
		return pageResult;
	}

	@Override
	public MemberCarUsed getLastMemberCarUsedByMemberId(MemberCarUsed memberCarUsed) {
		ParamVerifyUtils.paramNotNull(memberCarUsed.getMemberId(), "查询用户最后一次用车记录时，用户ID不能为空");
		return this.memberCarUsedMapper.getLastMemberCarUsed(memberCarUsed);
	}

	@Override
	public MemberCarUsed updateMemberCarUsedForBackstage(MemberCarUsed memberCarUsed) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public MemberCarUsed updateMemberCarUsedForMember(MemberCarUsed memberCarUsed) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private void updateUseCarAddredd(MemberCarUsed memberCarUsed){
		//用车、还车地址都需要维护
		Date date = new Date();
		this.updateUseCarAddredd(new MemberCarUsedAddress(memberCarUsed.getMemberId(), memberCarUsed.getMemberName(), 0, memberCarUsed.getOrderCarUsedAddress(), memberCarUsed.getLongitudeLatitude_useCarAddress(), null, date));
		this.updateUseCarAddredd(new MemberCarUsedAddress(memberCarUsed.getMemberId(), memberCarUsed.getMemberName(), 1, memberCarUsed.getOrderCarReturnAddress(), memberCarUsed.getLongitudeLatitude_returnCarAddress(), null, date));
	}
	
	private void updateUseCarAddredd(MemberCarUsedAddress memberCarUsedAddress){
		MemberCarUsedAddress search = new MemberCarUsedAddress();
		search.setMemberId(memberCarUsedAddress.getMemberId());
		search.setAddress(memberCarUsedAddress.getAddress());
		search.setType(memberCarUsedAddress.getType());
		List<MemberCarUsedAddress> list = this.memberCarUsedAddressMapper.selectByCondition(search);
		if(CollectionUtils.isEmpty(list)){
			//创建
			memberCarUsedAddress.setCount(1);
			memberCarUsedAddress.setCreated(new Date());
			this.memberCarUsedAddressMapper.insertSelective(memberCarUsedAddress);
		}else{
			search = list.get(0);
			if(search.getValid().equals(0)){
				memberCarUsedAddress.setValid(1);
			}
			memberCarUsedAddress.setCount(search.getCount()+1);
			this.memberCarUsedAddressMapper.updateByPrimaryKeySelective(memberCarUsedAddress);
		}
	}
}
