package cn.cuco.service.log.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.cuco.common.utils.param.ParamVerifyUtils;
import cn.cuco.dao.OperateLogMapper;
import cn.cuco.entity.Car;
import cn.cuco.entity.CarInsuranceDetail;
import cn.cuco.entity.OperateLog;
import cn.cuco.entity.OperateSetting;
import cn.cuco.entity.Parking;
import cn.cuco.enums.CarEnum;
import cn.cuco.enums.OperateLogEnum;
import cn.cuco.service.basic.business.OperateSettingService;
import cn.cuco.service.car.carInfo.CarService;
import cn.cuco.service.log.OperateLogService;

@Service(value = "operateLogService")
public class OperateLogServiceImpl implements OperateLogService {

    @Autowired
    private OperateLogMapper<OperateLog> operateLogMapper;
    @Autowired
    private OperateSettingService operateSettingService;
    @Autowired
    private CarService CarService;
   
    /**
     * 添加日志
     */
	@Override
	public OperateLog createOperateLog(OperateLog operateLog) {
		ParamVerifyUtils.paramNotNull(operateLog);
		ParamVerifyUtils.paramNotNull(operateLog.getType(), "添加日志类型不能为空");
		ParamVerifyUtils.paramNotNull(operateLog.getOperationId(), "添加日志操作ID不能为空");
		ParamVerifyUtils.paramNotNull(operateLog.getModifierId(), "添加日志操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(operateLog.getModifier(), "添加日志操作人不能为空");
		operateLog.setCreated(new Date());
		//添加日志
		operateLogMapper.insertSelective(operateLog);
		return operateLogMapper.selectByPrimaryKey(operateLog.getId());
	}

	/**
	 * 查询日志列表
	 */
	@Override
	public List<OperateLog> getOperateLogList(OperateLog operateLog) {
		ParamVerifyUtils.paramNotNull(operateLog);
		ParamVerifyUtils.paramNotNull(operateLog.getType(), "添加日志类型不能为空");
		ParamVerifyUtils.paramNotNull(operateLog.getOperationId(), "添加日志操作ID不能为空");
		return operateLogMapper.selectByCondition(operateLog);
	}

	/**
	 * 查询日志总条数
	 */
	@Override
	public Integer getOperateLogCount(OperateLog operateLog) {
		ParamVerifyUtils.paramNotNull(operateLog);
		ParamVerifyUtils.paramNotNull(operateLog.getType(), "添加日志类型不能为空");
		ParamVerifyUtils.paramNotNull(operateLog.getOperationId(), "添加日志操作ID不能为空");
		return operateLogMapper.selectCountByCondition(operateLog);
	}
	
	/**
	 * 创建停车场修改日志
	 */
	@Override
	public void createLogForParking(Parking parking) {
		ParamVerifyUtils.paramNotNull(parking);
		ParamVerifyUtils.paramNotNull(parking.getId(), "添加停车场日志操作ID不能为空");
		ParamVerifyUtils.paramNotNull(parking.getModifierId(), "添加停车场日志操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(parking.getModifier(), "添加停车场日志操作人不能为空");
		ParamVerifyUtils.paramNotNull(parking.getValidate(), "添加停车场日志状态不能为空");
		OperateLog operateLog = new OperateLog();
		operateLog.setType(OperateLogEnum.PARKING.getValue());
		operateLog.setOperationId(parking.getId());
		operateLog.setModifierId(parking.getModifierId());
		operateLog.setModifier(parking.getModifier());
		operateLog.setRemark(parking.getRemark());
		operateLog.setStatus(parking.getValidate());
		this.createOperateLog(operateLog);
	}

	/**
	 * 运营参数配置日志
	 */
	@Override
	public OperateLog createOperateLogForOperateSetting(OperateSetting operateSetting) {
		ParamVerifyUtils.paramNotNull(operateSetting);
		ParamVerifyUtils.paramNotNull(operateSetting.getId(), "创建参数配置，配置ID不能为空");
		ParamVerifyUtils.paramNotNull(operateSetting.getModifierId(), "创建参数配置，操作人不能为空");
		ParamVerifyUtils.paramNotNull(operateSetting.getModifier(), "创建参数配置，操作ID不能为空");
		//取旧的操作数据
		OperateSetting old_operateSetting = operateSettingService.getOperateSettingById(operateSetting.getId());
		OperateLog operateLog = new OperateLog();
		operateLog.setType(OperateLogEnum.OPERATE_SETTING.getValue());
		operateLog.setOperationId(operateSetting.getId());
		operateLog.setModifierId(operateSetting.getModifierId());
		operateLog.setModifier(operateSetting.getModifier());
		//拼接日志
		String remark = "";
		if(old_operateSetting!=null){
			if(StringUtils.isNoneBlank(operateSetting.getParameterValue()) && !old_operateSetting.getParameterValue().equals(operateSetting.getParameterValue())){
				remark +="参数由 "+old_operateSetting.getParameterValue() +"变更为 "+operateSetting.getParameterValue()+"<br/>";
			}
			operateLog.setRemark(remark);
		}
		return this.createOperateLog(operateLog);
	}
	
	@Override
	public void createLogForCarInsurance(CarInsuranceDetail carInsuranceDetail) {
		ParamVerifyUtils.paramNotNull(carInsuranceDetail, "创建车辆保险日志，车辆保险日志对象不能为空");
		ParamVerifyUtils.paramNotNull(carInsuranceDetail.getId(), "创建车辆保险日志，车辆保险日志对象ID不能为空");
		ParamVerifyUtils.paramNotNull(carInsuranceDetail.getModifierId(), "创建车辆保险日志，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(carInsuranceDetail.getModifier(), "创建车辆保险日志，操作人不能为空");
		OperateLog operateLog = new OperateLog();
		operateLog.setType(OperateLogEnum.INSURANCE.getValue());
		operateLog.setOperationId(carInsuranceDetail.getId());
		operateLog.setModifierId(carInsuranceDetail.getModifierId());
		operateLog.setModifier(carInsuranceDetail.getModifier());
		operateLog.setRemark("添加保险");
		this.createOperateLog(operateLog);
		
	}

	@Override
	public void createLogForCar(Car car) {
		ParamVerifyUtils.paramNotNull(car, "创建车辆日志，车辆对象不能为空");
		ParamVerifyUtils.paramNotNull(car.getId(), "创建车辆日志，车辆对象ID不能为空");
		ParamVerifyUtils.paramNotNull(car.getModifierId(), "创建车辆日志，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(car.getModifier(), "创建车辆日志，操作人不能为空");
		Car old_car = this.CarService.getCarById(car.getId());
		String remark="";
		if(null==old_car){
			//表示是创建车辆
			remark = "新建车辆";
		}
		if(null!=old_car){
			if(car.getStatus()!=old_car.getStatus()){
				//状态发生改变
				remark = "更改车辆状态为"+CarEnum.CarStatus.getName(car.getStatus());
			}
		}
		OperateLog operateLog = new OperateLog();
		operateLog.setType(OperateLogEnum.CAR.getValue());
		operateLog.setOperationId(car.getId());
		operateLog.setModifierId(car.getModifierId());
		operateLog.setModifier(car.getModifier());
		operateLog.setRemark(remark);
		this.createOperateLog(operateLog);
		
	}
   
}
