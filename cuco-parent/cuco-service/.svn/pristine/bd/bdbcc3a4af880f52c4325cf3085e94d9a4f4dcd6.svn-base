package cn.cuco.service.member.info.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;

import cn.cuco.common.utils.param.ParamVerifyUtils;
import cn.cuco.dao.MemberInfoMapper;
import cn.cuco.dao.MemberLoginLogMapper;
import cn.cuco.dao.MemberMapper;
import cn.cuco.entity.Member;
import cn.cuco.entity.MemberInfo;
import cn.cuco.entity.MemberLoginLog;
import cn.cuco.entity.OperateLog;
import cn.cuco.enums.MemberStatus;
import cn.cuco.enums.OperateLogEnum;
import cn.cuco.page.PageResult;
import cn.cuco.service.log.OperateLogService;
import cn.cuco.service.member.info.MemberService;

/**
 * @ClassName: MemberServiceImpl
 * @Description: 用户模块接口
 * @author zc.du
 * @date 2017年2月23日 上午10:32:27
 */
@Service(value = "memberService")
public class MemberServiceImpl implements MemberService {

	@Autowired
	private MemberMapper<Member> memberMapper;
	@Autowired
	private MemberInfoMapper<MemberInfo> memberInfoMapper;
	@Autowired
	private MemberLoginLogMapper<MemberLoginLog> memberLoginLogMapper;
	@Autowired
	private OperateLogService logService;

	@Override
	public Member updateMember(Member member) {
		ParamVerifyUtils.paramNotNull(member);
		ParamVerifyUtils.paramNotNull(member.getId(), "用户ID不能为空");
		this.memberMapper.updateByPrimaryKeySelective(member);
		return this.memberMapper.selectByPrimaryKey(member.getId());
	}

	@Override
	public Member updateMemberInfo(MemberInfo memberInfo) {
		ParamVerifyUtils.paramNotNull(memberInfo);
		ParamVerifyUtils.paramNotNull(memberInfo.getMemberId(), "更新用户证件信息时，用户ID不能为空");
		// 查询用户信息是否存在，如果不存在，则创建
		MemberInfo info = this.memberInfoMapper.getMemberInfoByMemberId(memberInfo.getMemberId());
		if (null == info) {
			// 创建
			memberInfo.setCreated(new Date());
			this.memberInfoMapper.insertSelective(memberInfo);
		} else {
			// 修改
			this.memberInfoMapper.updateByPrimaryKeySelective(memberInfo);
		}
		info = this.memberInfoMapper.getMemberInfoByMemberId(memberInfo.getMemberId());
		Member member = this.getMemberById(memberInfo.getMemberId());
		return member;
	}

	@Override
	public PageResult<Member> getMemberListByPage(Member member) {
		ParamVerifyUtils.paramNotNull(member);
		Integer page = member.getPage();
		Integer pageSize = member.getPageSize();
		Integer totalSize = this.memberMapper.selectCountByCondition(member);
		PageHelper.startPage(page, pageSize);
		List<Member> list = this.memberMapper.selectByCondition(member);
		PageResult<Member> pageResult = new PageResult<Member>(page, pageSize, totalSize, list);
		return pageResult;
	}

	@Override
	public Member updateMember2FreezeById(Member member) {
		Long modifierId = member.getModifierId();
		String modifier = member.getModifier();
		ParamVerifyUtils.paramNotNull(modifierId, "冻结用户时，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(modifier, "冻结用户时，操作人姓名不能为空");
		member = this.getMemberById(member.getId());
		ParamVerifyUtils.paramNotNull(member, "用户不存在,无法进行冻结操作");
		if (MemberStatus.FROZEN.getIndex().equals(member.getStatuts())) {
			return member;
		}
		Date date = new Date();
		Member target = new Member();
		target.setId(member.getId());
		target.setStatuts(MemberStatus.FROZEN.getIndex());
		target.setLasttimeModify(date);
		this.memberMapper.updateByPrimaryKeySelective(target);
		member.setStatuts(MemberStatus.FROZEN.getIndex());
		// 创建冻结日志
		OperateLog log = new OperateLog();
		log.setCreated(date);
		log.setModifier(modifier);
		log.setModifierId(modifierId);
		log.setOperationId(member.getId());
		log.setStatus(MemberStatus.FROZEN.getIndex());
		log.setType(OperateLogEnum.USER.getValue());
		logService.createOperateLog(log);
		return member;
	}

	@Override
	public Member updateMember2UnfreezeById(Member member) {
		Long modifierId = member.getModifierId();
		String modifier = member.getModifier();
		ParamVerifyUtils.paramNotNull(modifierId, "解冻用户时，操作人ID不能为空");
		ParamVerifyUtils.paramNotNull(modifier, "解冻用户时，操作人姓名不能为空");
		member = this.getMemberById(member.getId());
		ParamVerifyUtils.paramNotNull(member, "用户不存在,无法进行解冻操作");
		if (MemberStatus.NORMAL.getIndex().equals(member.getStatuts())) {
			return member;
		}
		Date date = new Date();
		Member target = new Member();
		target.setId(member.getId());
		target.setStatuts(MemberStatus.NORMAL.getIndex());
		target.setLasttimeModify(date);
		this.memberMapper.updateByPrimaryKeySelective(target);
		member.setStatuts(MemberStatus.NORMAL.getIndex());
		// 创建冻结日志
		OperateLog log = new OperateLog();
		log.setCreated(date);
		log.setModifier(modifier);
		log.setModifierId(modifierId);
		log.setOperationId(member.getId());
		log.setStatus(MemberStatus.NORMAL.getIndex());
		log.setType(OperateLogEnum.USER.getValue());
		logService.createOperateLog(log);
		return member;
	}

	@Override
	public Member getMemberById(Long memberId) {
		ParamVerifyUtils.paramNotNull(memberId, "用户ID不能为空");
		Member member = this.getMember(memberId);
		MemberInfo info = this.getMemberInfoByMemberId(memberId);
		member.setMemberInfo(info);
		return member;
	}

	@Override
	public Member getMemberByMobile(String mobile) {
		ParamVerifyUtils.paramNotNull(mobile, "用户手机号不能为空");
		Member search = new Member();
		search.setMobile(mobile);
		return this.getMember(search);
	}

	@Override
	public Member getMemberByOpenId(String openId) {
		ParamVerifyUtils.paramNotNull(openId, "用户openid不能为空");
		Member search = new Member();
		search.setOpenid(openId);
		return this.getMember(search);
	}

	private Member getMember(Member member) {
		List<Member> list = this.memberMapper.selectByCondition(member);
		if (CollectionUtils.isEmpty(list)) {
			return null;
		}
		member = list.get(0);
		MemberInfo info = this.getMemberInfoByMemberId(member.getId());
		member.setMemberInfo(info);
		return list.get(0);
	}

	@Override
	public Member updateMemberLoginForWechat(Member member, MemberLoginLog memberLoginLog) {
		ParamVerifyUtils.paramNotNull(member);
		ParamVerifyUtils.paramNotNull(member.getMobile(), "用户手机号不能为空");
		Date date = new Date();
		// 判断用户是否存在
		// 插入登录日志
		memberLoginLog.setId(member.getId());
		memberLoginLog.setCreated(date);
		createMemberLoginLog(memberLoginLog);
		return null;
	}

	@Override
	public Member updateMemberLoginForApp(Member member, MemberLoginLog memberLoginLog) {

		return null;
	}

	private void createMemberLoginLog(MemberLoginLog memberLoginLog) {
		this.memberLoginLogMapper.insertSelective(memberLoginLog);
	}

	private Member getMember(Long id) {
		return this.memberMapper.selectByPrimaryKey(id);
	}

	private MemberInfo getMemberInfoByMemberId(Long id) {
		return this.memberInfoMapper.getMemberInfoByMemberId(id);
	}

}
