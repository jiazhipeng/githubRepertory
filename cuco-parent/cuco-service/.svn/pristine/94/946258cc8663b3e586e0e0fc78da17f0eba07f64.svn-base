package cn.cuco.service.statistics.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.cuco.common.utils.date.DateUtils;
import cn.cuco.common.utils.param.ParamVerifyUtils;
import cn.cuco.entity.Carport;
import cn.cuco.entity.OrderCarport;
import cn.cuco.enums.OrderCarportStatus;
import cn.cuco.exception.ExceptionUtil;
import cn.cuco.service.basic.carport.CarportService;
import cn.cuco.service.order.OrderCarportService;
import cn.cuco.service.statistics.CarportStatisticsService;

@Service
public class CarportStatisticsServiceImpl implements CarportStatisticsService {

	@Autowired
	private CarportService carportService;
	@Autowired
	private OrderCarportService orderCarportService;
	@Override
	public List<Map<String, Object>> getUnlockCarportStatistics(int dateType,Date startTime, Date endTime,int type) {
		ParamVerifyUtils.paramNotNull(startTime, "统计解锁车库时，开始时间不能为空");
		ParamVerifyUtils.paramNotNull(endTime, "统计解锁车库时，结束时间不能为空");
		if (startTime.after(endTime)) {
			ExceptionUtil.throwWarn("统计解锁车库时，开始是时间不能大于结束时间");
		}
		List<Map<String, Object>> result = new ArrayList<>();
		Carport carport = new Carport();
		carport.setPage(1);
		carport.setPageSize(100000);
		List<Carport> ports = this.carportService.getCarportByPage(carport).getItems();
		if(CollectionUtils.isEmpty(ports)){
			return result;
		}
		if(0 == type){
			result = getUnlockCarportStatisticsByNum(ports,dateType,startTime,endTime);
		}else{
			result = getUnlockCarportStatisticsByMoney(ports,dateType,startTime,endTime);
		}
		return result;
	}
	public List<Map<String, Object>> getUnlockCarportStatisticsByNum(List<Carport> ports,int type,Date startTime, Date endTime) {
		List<Map<String, Object>> result = new ArrayList<>();
		try {
			long count = 0;
			if (0 == type) {
				// 按天查询
				count = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60 * 24) + 1;
				for (int i = 0; i < count; i++) {
					startTime = DateUtils.getDayMiniDate(startTime);
					endTime = DateUtils.getDayMaxDate(startTime);
					this.setMapForNum(result, ports, startTime, endTime);
					startTime = DateUtils.addDays(startTime, 1);
				}
			} else if (1 == type) {
				// 按周查询
				count = DateUtils.getCountTwoDayWeek(startTime, endTime);
				for (int i = 0; i < count; i++) {
					Date monday = DateUtils.getMondayByDate(DateUtils.addWeeks(startTime, i));
					if (monday.before(startTime)) {
						monday = startTime;
					}
					monday = DateUtils.getDayMiniDate(monday);
					Date sunday = DateUtils.getDayMaxDate(DateUtils.getSundayByDate(monday));
					if (sunday.after(endTime)) {
						sunday = endTime;
					}
					this.setMapForNum(result, ports, startTime, endTime);
				}
			} else {
				// 按月查询
				count = DateUtils.getCountTwoDayMonth(startTime, endTime);
				for (int i = 0; i < count; i++) {
					Date first = DateUtils.getFirstOfMonth(DateUtils.addMonths(startTime, i));
					if (first.before(startTime)) {
						first = startTime;
					}
					first = DateUtils.getDayMiniDate(first);
					Date end = DateUtils.getDayMaxDate(DateUtils.getLastOfMonth(first));
					if (end.after(endTime)) {
						end = endTime;
					}
					this.setMapForNum(result, ports, startTime, endTime);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public List<Map<String, Object>> getUnlockCarportStatisticsByMoney(List<Carport> ports,int type,Date startTime, Date endTime) {
		List<Map<String, Object>> result = new ArrayList<>();
		try {
			long count = 0;
			if (0 == type) {
				// 按天查询
				count = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60 * 24) + 1;
				for (int i = 0; i < count; i++) {
					startTime = DateUtils.getDayMiniDate(startTime);
					endTime = DateUtils.getDayMaxDate(startTime);
					this.setMapForMoney(result, ports, startTime, endTime);
					startTime = DateUtils.addDays(startTime, 1);
				}
			} else if (1 == type) {
				// 按周查询
				count = DateUtils.getCountTwoDayWeek(startTime, endTime);
				for (int i = 0; i < count; i++) {
					Date monday = DateUtils.getMondayByDate(DateUtils.addWeeks(startTime, i));
					if (monday.before(startTime)) {
						monday = startTime;
					}
					monday = DateUtils.getDayMiniDate(monday);
					Date sunday = DateUtils.getDayMaxDate(DateUtils.getSundayByDate(monday));
					if (sunday.after(endTime)) {
						sunday = endTime;
					}
					this.setMapForMoney(result, ports, startTime, endTime);
				}
			} else {
				// 按月查询
				count = DateUtils.getCountTwoDayMonth(startTime, endTime);
				for (int i = 0; i < count; i++) {
					Date first = DateUtils.getFirstOfMonth(DateUtils.addMonths(startTime, i));
					if (first.before(startTime)) {
						first = startTime;
					}
					first = DateUtils.getDayMiniDate(first);
					Date end = DateUtils.getDayMaxDate(DateUtils.getLastOfMonth(first));
					if (end.after(endTime)) {
						end = endTime;
					}
					this.setMapForMoney(result, ports, startTime, endTime);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	private List<OrderCarport> getCompletePayOrderList(Long carportId,Date start,Date end){
		OrderCarport order = new OrderCarport();
		order.setCarportId(carportId);
		order.setStatus(OrderCarportStatus.COMPLETE_PAY.getIndex());
		order.setStart(start);
		order.setEnd(end);
		List<OrderCarport> list = this.orderCarportService.getOrderCarportListByPage(order).getItems();
		if(CollectionUtils.isEmpty(list)){
			return new ArrayList<OrderCarport>();
		}
		return list;
	}
	
	private int getCompletePayOrderCount(Long carportId,Date start,Date end){
		List<OrderCarport> list = this.getCompletePayOrderList(carportId, start, end);
		if(CollectionUtils.isEmpty(list)){
			return 0;
		}
		return list.size();
	}
	
	private void setMapForNum(List<Map<String, Object>> target,List<Carport> ports,Date startTime,Date endTime){
		Map<String,Object> data = new HashMap<>();
		data.put("date", startTime);
		for(Carport cur : ports){
			int num = this.getCompletePayOrderCount(cur.getId(), startTime, endTime);
			data.put(cur.getCarportName(), num);
		}
		target.add(data);
	}
	
	private void setMapForMoney(List<Map<String, Object>> target,List<Carport> ports,Date startTime,Date endTime){
		Map<String,Object> data = new HashMap<>();
		data.put("date", startTime);
		for(Carport cur : ports){
			BigDecimal total = new BigDecimal(0);
			List<OrderCarport> list = this.getCompletePayOrderList(cur.getId(), startTime, endTime);
			for(OrderCarport order : list){
				total.add(order.getTotal());
			}
			data.put(cur.getCarportName(), total);
		}
		target.add(data);
	}

}
